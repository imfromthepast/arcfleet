<apex:page showHeader="false" standardStylesheets="false" controller="AlienHeadEditorController" action="{!init}">
	<!-- Include CSS -->
    <!-- Bootstrap -->
    <link href="{!URLFOR($Resource.ARCFleetResources,'bootstrap/css/bootstrap.min.css')}" rel="stylesheet" type="text/css"/>
    
    <!-- Include JS -->
    <!-- is.js -->
    <script src="{! $Resource.ISJS}"/>
    <!-- jQuery -->
    <script src="{!URLFOR($Resource.ARCFleetResources, 'js/jquery-2.1.1.min.js')}"/>
    <!-- Bootstrap JS -->
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"/>
    <!-- AngularJS CDN -->
    <script src="{!URLFOR($Resource.ARCFleetResources,'js/angular.min.js')}" type="text/javascript"/>
    <!-- <script src="{!URLFOR($Resource.ARCFleetResources, 'js/bootstrap-growl.min.js')}" type="text/javascript"/> -->
    <!-- <script src="http://www.sunsean.com/Whirlpool.js" type="text/javascript"/> -->
    <!-- <script src="{! $Resource.ProcGenGalaxy}"/>  -->
    <apex:includeScript value="https://code.createjs.com/easeljs-0.8.2.min.js"/>
    <apex:includeScript value="{!$Resource.EaseljsClip}"/>
    <apex:form >
	    <body>
	    	<div class="container-fluid">
	    		<h1>Alien Head Editor</h1>
	            <div class="col-xs-12">                
	                <canvas class="center-block" id="alienCanvas" height="800px" width="2000px"></canvas>
	            </div>
	            <div class="col-xs-12">            	
		            <div style="width: 400px; display:inline-block; vertical-align: top; margin-right:10px;">  	            	
		            	<h4>Neck</h4>  
		                <canvas id="neckCanvas" height="400px" width="400px"></canvas> 
		                <apex:commandbutton styleclass="btn btn-default" action="{!saveNeck}" value="Save"/>
		                <div><apex:inputfield id="neckjson" styleclass="form-control" value="{!neck.JSON__c}"/></div>
	                </div>                 	
		            <div style="width: 200px; display:inline-block; vertical-align: top; margin-right:10px;">  	            	
		            	<h4>Head</h4>          
		                <canvas id="headCanvas" height="400px" width="200px"></canvas> 
		                <div id="headLineModeButton" class="btn btn-default" onclick="toggleHeadMode()">Line Mode</div>
		                <apex:commandbutton styleclass="btn btn-default" action="{!saveHead}" value="Save"/>
		                <div><apex:inputfield id="headjson" styleclass="form-control" value="{!head.Shape__c}"/></div>
		                <div><apex:inputfield id="headanchors" styleclass="form-control" value="{!head.Anchors__c}"/></div>
	                </div>        	
		            <div style="width: 400px; display:inline-block; vertical-align: top;">
		            	<h4>Part</h4>   
		                <canvas id="partCanvas" height="400px" width="400px"></canvas>
		                <apex:commandbutton styleclass="btn btn-default" action="{!savePart}" value="Save"/>
		                <div><apex:inputfield id="partjson" styleclass="form-control" value="{!part.JSON__c}"/></div>
		            </div>
	            </div>
	        </div>
	    </body>
    </apex:form>
    <style>
		canvas{
			border: solid 1px black;
		}
    </style>
    <script>

        function randomIntFromInterval(min,max){
            return Math.floor(Math.random()*(max-min+1)+min);
        } 
        function rifi(min,max){
            return randomIntFromInterval(min,max);
        }           
        function randomArrayElem(arr){              
            return arr[randomIntFromInterval(0,arr.length-1)];
        } 
        function rae(arr){
            return randomArrayElem(arr);
        } 

        var alienStage = new createjs.Stage('alienCanvas');
        var neckStage = new createjs.Stage('neckCanvas');
        var headStage = new createjs.Stage('headCanvas');
        var partStage = new createjs.Stage('partCanvas');
        var bg = new createjs.Shape();                      
        var headMode = 'line';
        var neckX = 0;
        var neckY = 0;
        var headX = 0;
        var headY = 0;
        var partX = 0;
        var partY = 0;
        var neckShapes = '';
        var headShapes = '';
        var anchorPoints = '';
        var partShapes = '';
        var headLineFinished = false;
        var headShape = [{!head.shape__c}];
        var neckShape = [{!neck.JSON__c}];
        var partShape = [{!part.JSON__c}];

        var l = new createjs.Shape();
        //var bcHandle1 = new createjs.Shape();
        
        //bcHandle1.graphics.beginFill('red').drawCircle(0,0,10);
        //bcHandle1.x = 50;
	    //bcHandle1.y = 50;
  //       var dragger = new createjs.Container();
		// dragger.x = 50;
		// dragger.y = 100;
		// dragger.addChild(bcHandle1);
		
    	var existingHeadShapes = [
    		<apex:repeat value="{!heads}" var="h">
    			[{!h.Shape__c}],
    		</apex:repeat>
    	];

 		addGrid(neckStage);
 		addGrid(headStage);
 		addGrid(partStage);


        // bg.graphics.beginLinearGradientFill(["#555","#999","#555"], [0, 0.5, 1], 0, 0, 0, 500).drawRect(0, 0, 1000, 500);
        // alienStage.addChild(bg);
		

    	var alienStage = new createjs.Stage('alienCanvas');
    	for (var ii = 0; ii < existingHeadShapes.length; ii++) {
    		var points = existingHeadShapes[ii];
    		var polygon = new createjs.Shape();
            polygon.graphics.setStrokeStyle(1).beginStroke('black');
            var size=10;
            var scale=10;
            var canvasWidth = 2000;
            polygon.x = ((((ii+0)*size)*scale) % (canvasWidth/2))*2;
            polygon.y = (Math.floor(ii/(canvasWidth/200))*size)*(scale*2);

			console.log(polygon.x+','+polygon.y);
            for (var i = 0; i < points.length; i++) {
                var x = points[i].x*size;
                var y = points[i].y*size;
                var cx1 = (points[i].x+points[i].cx1)*size;
                var cy1 = (points[i].y+points[i].cy1)*size;
                var cx2 = (points[i].x+points[i].cx2)*size;
                var cy2 = (points[i].y+points[i].cy2)*size;
                if(points[i].f=='moveTo'){
                	polygon.graphics.mt(x,y);
                }else{
                	polygon.graphics.lt(x,y);
                }
            }
            var text = new createjs.Text(ii, "20px Arial", "#ff7700");
			text.x = polygon.x +90;
			text.y = polygon.y +100;
			text.textBaseline = "alphabetic";
			alienStage.addChild(text);
            alienStage.addChild(polygon);
            alienStage.addChild(flipX(polygon));
    	}
    	//alienStage.update();

        function flipX(part){
            var newPart = part.clone(true);
            newPart.rotation = part.rotation * -1;
            newPart.scaleX = -1;
            newPart.x = (part.x*1)+200;
            console.log('mirror: '+newPart.x);
            return newPart;
        }

        if(headShape.length>0) drawShape(headStage,headShape);
        if(neckShape.length>0) drawShape(neckStage,neckShape);
        if(partShape.length>0) drawShape(partStage,partShape);

        alienStage.update();
        neckStage.update();
        headStage.update();
		partStage.update();

		var scale = 20;

        neckStage.on("stagemousedown", function(evt) {
        	var l = new createjs.Shape();
        	var x = Math.round(evt.stageX/scale)*scale;
        	var y = Math.round(evt.stageY/scale)*scale;
        	console.log(x+','+y);
        	neckX = neckX==0?x:neckX;
    		neckY = neckY==0?y:neckY;
        	l.graphics.setStrokeStyle(1).beginStroke('#999').moveTo(neckX,neckY);
            neckX = x;
        	neckY = y;
            l.graphics.lineTo(neckX,neckY);
            neckStage.addChild(l);
            neckStage.update();
            neckShapes += '{x:'+Math.round(neckX/scale)+',y:'+Math.round(neckY/scale)+',cx1:rifi(0,1),cy1:rifi(0,1),cx2:rifi(0,1),cy2:rifi(0,1),f:\'bezierTo\'},';
            $('[id$=neckjson]').html(neckShapes);
        });
        /**/
        headStage.on("stagemousedown", function(evt) {
        	var x = Math.round(evt.stageX/scale)*scale;
        	var y = Math.round(evt.stageY/scale)*scale;
            
            if(headMode=='line'){
            	// lineMode
            	if(!headLineFinished){
	            	//var l = new createjs.Shape();
	            	l.graphics.setStrokeStyle(2).beginStroke('#999');
	            	if(headX==0 && headY==0){	            			
		            	headX = 200;
		        		headY = y;	        		
	            	}else{            		
		            	var h = new createjs.Shape();          		
		            	l.graphics.moveTo(headX,headY);
		                headX = x;
		            	headY = y;
			            l.graphics.bt(headX,headY,x,y,headX,headY);
		            	h.graphics.setStrokeStyle(1).beginFill('#999').drawCircle(x,y,5);

			            headStage.addChild(l);
			            if(headX != 200) headStage.addChild(h);
			           	if(headX == 200){
			           		headLineFinished = true;
			           	}
			            headStage.update();
			        }
			        //headShape.push({x:Math.round(headX/scale),y:Math.round(headY/scale)})
			        headShapes += '{x:'+Math.round(headX/scale)+',y:'+Math.round(headY/scale);
			        if(headX == 200){
			        	headShapes = headShapes +',cx1:0,cy1:0,cx2:0,cy2:0,f:\'bezierTo\'},';
			        }else{
			        	headShapes = headShapes +',cx1:rifi(0,1),cy1:rifi(0,1),cx2:rifi(0,1),cy2:rifi(0,1),f:\'bezierTo\'},';
			        }
		        }else{
		        	console.log('head line finished!');
		        }
	            
            }else if(headMode=='anchor'){
            // pointMode
                var c = new createjs.Shape();
                c.graphics.setStrokeStyle(1).beginStroke('#f00').drawCircle(x,y,20);
                headStage.addChild(c);
                headStage.update();
                anchorPoints += '{x:'+Math.round(evt.stageX/scale)+',y:'+Math.round(evt.stageY/scale)+'},';
            }
            $('[id$=headjson]').html(headShapes);
            $('[id$=headanchors]').html(anchorPoints);
	    });
        /**/
        partStage.on("stagemousedown", function(evt) {            
        	var l = new createjs.Shape();

        	var m = new createjs.Shape();

        	var x = Math.round(evt.stageX/scale)*scale;
        	var y = Math.round(evt.stageY/scale)*scale;
        	partX = partX==0?x:partX;
    		partY = partY==0?y:partY;
        	l.graphics.setStrokeStyle(1).beginStroke('#999').moveTo(partX,partY);
        	m.graphics.setStrokeStyle(1).beginStroke('#ccc').moveTo(400-partX,partY);
            partX = x;
        	partY = y;
            l.graphics.lineTo(partX,partY);            
            m.graphics.lineTo(400-partX,partY);
            partStage.addChild(l);
            partStage.addChild(m);
            partStage.update();

            var partShapes += '{x:'+Math.round(partX/scale)+',y:'+Math.round(partY/scale)+',cx1:rifi(0,1),cy1:rifi(0,1),cx2:rifi(0,1),cy2:rifi(0,1),f:\'bezierTo\'},';
            var partShapesM += '{x:'+Math.round(400-partX/scale)+',y:'+Math.round(partY/scale)+',cx1:rifi(0,1),cy1:rifi(0,1),cx2:rifi(0,1),cy2:rifi(0,1),f:\'bezierTo\'},';
            
            $('[id$=partjson]').html(partShapes+partShapesM);
        });
        function bezierCurvePressHandler(evt){
        	console.log('bc pressed');
        }
        function toggleHeadMode(){
			headMode = headMode=='line'?'anchor':'line';
			if(headMode == 'line'){
				$('#headLineModeButton').html('Line Mode');
			}else if(headMode == 'anchor'){
				$('#headLineModeButton').html('Anchor Mode');
			}
        }
        function addGrid(stage){        	
	        var lines = 20;
        	var dist = 20; 
	        for (var i = 1; i < lines; i++) { 
	            var hl = new createjs.Shape();
	            var y = dist*i;
	            var color = i==lines/2?'#999':'#eee';
	            hl.graphics.setStrokeStyle(1).beginStroke(color).moveTo(0,y).lineTo(400,y);
	            stage.addChild(hl);

	            var vl = new createjs.Shape();
	            var x = dist*i;
	            vl.graphics.setStrokeStyle(1).beginStroke(color).moveTo(x,0).lineTo(x,400);
	            stage.addChild(vl);
	        }   
        }
        function drawShape(stage,points){
        	var polygon = new createjs.Shape();
            polygon.graphics.setStrokeStyle(1).beginStroke('black');
            var size=20;
            for (var i = 0; i < points.length; i++) {
	            var h = new createjs.Shape();
                var x = points[i].x*size;
                var y = points[i].y*size;
                var cx1 = (points[i].x+points[i].cx1)*size;
                var cy1 = (points[i].y+points[i].cy1)*size;
                var cx2 = (points[i].x+points[i].cx2)*size;
                var cy2 = (points[i].y+points[i].cy2)*size;
		        h.graphics.setStrokeStyle(1).beginFill('#999').drawCircle(x,y,5);
                if(x!=200) stage.addChild(h);
                if(points[i].f=='moveTo'){
                	polygon.graphics.mt(x,y);
                }else{
                	polygon.graphics.lt(x,y);
                }
            }
            stage.addChild(polygon);
        }
    </script>
</apex:page>