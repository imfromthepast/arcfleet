<apex:page showHeader="false" standardStylesheets="false">
	<html>
		<head>
		  	<script src="https://cdn.firebase.com/js/client/2.2.1/firebase.js"></script>
		  	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
		  	<!-- <link rel="stylesheet" type="text/css" href="/resources/tutorial/css/example.css"/> -->
			<style>
				#drawing-canvas{
					border: 3px solid #999; 
				}
				#terrainholder{
					width: 480px;
					height: 30px;
					border: 2px solid #424547;
					margin: 5px auto 0px auto; 
				}
				.colorbox{
					width: 22px;
					height: 22px;
					margin: 1px;
					display: inline-block;
					border: 3px solid black;
				}
				.l-demo-container{
					width: 1000px;
					margin: 40px auto 0px auto; 
				}
			</style>
		</head>
		<body>
			<input id="brushSize" type="number" value="1"/>
			<div class="l-demo-container">
  				<canvas id="drawing-canvas" width="1000" height="1000"></canvas>
			</div>
			<div id="terrainholder"></div>
			<script>
		        function randomIntFromInterval(min,max){
		            return Math.floor(Math.random()*(max-min+1)+min);
		        }
			  	$(document).ready(function () {
			    	//Set up some globals
			    	var pixSize = 10, lastPoint = null, currentColor = "000", mouseDown = 0;
			    	
			    	//Create a reference to the pixel data for our drawing.
			    	var pixelDataRef = new Firebase('https://arcfleet.firebaseio.com/galaxy');

				    // Set up our canvas
				    var myCanvas = document.getElementById('drawing-canvas');
				    var myContext = myCanvas.getContext ? myCanvas.getContext('2d') : null;
				    if (myContext == null) {
			      		alert("You must use a browser that supports HTML5 Canvas to run this demo.");
			      		return;
			    	}

			    	//Setup each color palette & add it to the screen
			    	var terrains = [
			    		{
			    			"Name":"Empty",
			    			"Color":"000"
			    		},{
			    			"Name":"Interspiral",
			    			"Color":"333"
			    		},{
			    			"Name":"Fringe",
			    			"Color":"444"
			    		},{
			    			"Name":"Axis",
			    			"Color":"555"
			    		},{
			    			"Name":"Nuclues",
			    			"Color":"888"
			    		},{
			    			"Name":"Core",
			    			"Color":"999"
			    		}
			    	];
			    	for (t in terrains) {
			      		var item = $('<div/>').css("background-color", '#'+terrains[t].Color).addClass("colorbox");
			      		item.click((function () {
			        		var ter = terrains[t];
			        		return function () {
			          			currentTerrain = ter;
			        		};
			      		})());
			      		item.appendTo('#terrainholder');
			    	}

			    	//Keep track of if the mouse is up or down
			    	myCanvas.onmousedown = function () {mouseDown = 1;};
			    	myCanvas.onmouseout = myCanvas.onmouseup = function () {
			      		mouseDown = 0; lastPoint = null;
			    	};

			    	//Draw a line from the mouse's last position to its current position
					var drawLineOnMouseMove = function(e) {
					    if (!mouseDown) return;

					    e.preventDefault();

					    // Bresenham's line algorithm. We use this to ensure smooth lines are drawn
					    var offset = $('canvas').offset();
					    var x1 = Math.floor((e.pageX - offset.left) / pixSize - 1),
					        y1 = Math.floor((e.pageY - offset.top) / pixSize - 1);
					    var x0 = (lastPoint == null) ? x1 : lastPoint[0];
					    var y0 = (lastPoint == null) ? y1 : lastPoint[1];
					    var dx = Math.abs(x1 - x0), dy = Math.abs(y1 - y0);
					    var sx = (x0 < x1) ? 1 : -1, sy = (y0 < y1) ? 1 : -1, err = dx - dy;
					    while (true) {
					        //write the pixel into Firebase, or if we are drawing white, remove the pixel
					        
					        if(x0 >= 0 && x0 < 100){
					        	if(y0 >= 0 && y0 < 100){
					        		paintBrush(x0,y0,$('#brushSize').val()-1);
					        	}
					        }
					        if (x0 == x1 && y0 == y1) break;
					        var e2 = 2 * err;
					        if (e2 > -dy) {
					          	err = err - dy;
					          	x0 = x0 + sx;
					        }
					        if (e2 < dx) {
					          	err = err + dx;
					          	y0 = y0 + sy;
					        }
					    }
			      		lastPoint = [x1, y1];
				    };
		            function distance(p1, p2)
					{
					   dx = p2.x - p1.x; dx *= dx;
					   dy = p2.y - p1.y; dy *= dy;
					   return Math.sqrt( dx + dy );
					}
				    function paintBrush(x, y, r)
					{
					    var paintedArea = [];
					    for(var j=x-r; j<=x+r; j++)
					    {   
					    	for(var k=y-r; k<=y+r; k++)
					        {   
					        	if(distance({x:j,y:k},{x:x,y:y}) <= r){
					        		//console.log(j+'x'+k);
					        		if(j>=0 && j <100){
					        			if(k >= 0 && k < 100){
					        				pixelDataRef.child(j + "x" + k).set(
							        			currentTerrain.Name === "Erase" ? null : 
							        			{
							        				terrain : currentTerrain.Color,
							        				baseGPot : randomIntFromInterval(0,10),
							        				baseRPot : randomIntFromInterval(0,10)
							        			}
							        		);
					        			}
					        		}
					        	}
					        }
					    }
					}
				    $(myCanvas).mousemove(drawLineOnMouseMove);
				    $(myCanvas).mousedown(drawLineOnMouseMove);

				    // Add callbacks that are fired any time the pixel data changes and adjusts the canvas appropriately.
				    // Note that child_added events will be fired for initial pixel data as well.
				    var drawPixel = function(snapshot) {
				      var coords = snapshot.key().split("x");
				      myContext.fillStyle = "#" + snapshot.val().terrain;
				      myContext.fillRect(parseInt(coords[0]) * pixSize, parseInt(coords[1]) * pixSize, pixSize, pixSize);
				    };
				    var clearPixel = function(snapshot) {
				      var coords = snapshot.key().split("x");
				      myContext.clearRect(parseInt(coords[0]) * pixSize, parseInt(coords[1]) * pixSize, pixSize, pixSize);
				    };
				    pixelDataRef.on('child_added', drawPixel);
				    pixelDataRef.on('child_changed', drawPixel);
				    pixelDataRef.on('child_removed', clearPixel);
			  	});
			</script>
		</body>
	</html>
</apex:page>