<apex:page showHeader="false" standardStylesheets="false" controller="CanvasController" action="{!init}">
        
      <link rel="apple-touch-startup-image" media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)" href="{!URLFOR($Resource.ARCFleetStartupImage,'apple-touch-startup-image-640x1096.png')}"/>
      <link rel="apple-touch-icon" href="{!URLFOR($Resource.AppleARCFleetIcon)}" sizes="150x150"/>
      <meta name="apple-mobile-web-app-capable" content="yes"/>
      <meta name="apple-mobile-web-app-status-bar-style" content="black"/>
      <meta name="apple-mobile-web-app-title" content="ARC Fleet"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"/>

    <!-- Include CSS -->
    <!-- Bootstrap -->
    <link href="{!URLFOR($Resource.ARCFleetResources,'bootstrap/css/bootstrap.min.css')}" rel="stylesheet" type="text/css"/>
    
    <!-- Include JS -->
    <!-- is.js -->
    <script src="{! $Resource.ISJS}"/>
    <!-- jQuery -->
    <script src="{!URLFOR($Resource.ARCFleetResources, 'js/jquery-2.1.1.min.js')}"/>
    <!-- Bootstrap JS -->
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"/>
    <!-- AngularJS CDN -->
    <script src="{!URLFOR($Resource.ARCFleetResources,'js/angular.min.js')}" type="text/javascript"/>
    <!-- <script src="{!URLFOR($Resource.ARCFleetResources, 'js/bootstrap-growl.min.js')}" type="text/javascript"/> -->
    <!-- <script src="http://www.sunsean.com/Whirlpool.js" type="text/javascript"/> -->
    <!-- <script src="{! $Resource.ProcGenGalaxy}"/>  -->
    <apex:includeScript value="https://code.createjs.com/easeljs-0.8.2.min.js"/>
    <apex:includeScript value="https://code.createjs.com/tweenjs-0.6.2.min.js"/>
    <apex:includeScript value="{!$Resource.EaseljsClip}"/>
    <link href="{!$Resource.ARCFleetGameCSS}" rel="stylesheet" type="text/css"/>
    <!-- <apex:includeScript value="{!$Resource.HeadData}"/> -->
	<body onload="init()">
    	<div class="container">
            <div class="row"> 
                <div class="col-xs-12 col-md-6 col-md-offset-3">
                    <div class="xscanlines">
                        <canvas id="alienCanvas" class="img-responsive" height="350px" width="600px"></canvas>
                    </div>
                    <div class="col-xs-12">
                        <div id="history" class="xtext-capitalize"></div>
                    </div>
                    <div class="col-xs-12">
                        <p/>
                        <label>Seed</label>
                        <input id="alienSeed" class="form-control"/>
                        <p/>
                    </div>
                    <div class="col-xs-12">
                        <div class="btn-group btn-group-justified">
                            <div class="btn-group">
                                <button onclick="genFromSeed()" class="btn panelButton btn-default">Gen</button>                                       
                            </div>
                            <div class="btn-group">
                                <button onclick="callAliens()" class="btn panelButton btn-default">More</button>                                      
                            </div>
                            <div class="btn-group">
                                <button onclick="randomSeed()" class="btn panelButton btn-default">Random</button>                                     
                            </div>
                            <div class="btn-group" id="shareCode">                                    
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <apex:form >
            <apex:actionFunction action="{!save}" name="AF_save()"/>
            <apex:inputfield value="{!alienSpecies.Seeds__c}" id="seeds"/>
        </apex:form>
    </body>
    <style>
		canvas{
            display: block;
            margin-right: auto;
            margin-left: auto;
			border: solid 1px black;
            border-radius: 10px;
		}
        body{
            background: black;
            color:rgb(41, 209, 255);
        }
        @font-face {
            font-family: 'ARCFleet';
            src: url("{!URLFOR($Resource.ARCFleetResources,'/fonts/SFAlienEncountersSolid.ttf')}");
        }
        @font-face {
            font-family: 'ARCFleetLined';
            src: url("{!URLFOR($Resource.ARCFleetResources,'/fonts/SFAlienEncounters.ttf')}");
        }
    </style>
    <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}';
    </script>
    <script src="/soap/ajax/37.0/connection.js" type="text/javascript"></script>
    <script>
        function randomIntFromInterval(min,max){
            return Math.floor(Math.random()*(max-min+1)+min);
        } 
        function rifi(min,max){
            return randomIntFromInterval(min,max);
        }           
        function randomArrayElem(arr){              
            return arr[randomIntFromInterval(0,arr.length-1)];
        } 
        function rae(arr){
            return randomArrayElem(arr);
        } 
        function rdfi(min,max){
            return Math.random()*(max-min+1)+min;
        }
        createjs.Graphics.prototype.dashedLineTo = function( x1 , y1 , x2 , y2 , dashLen ){
            this.moveTo( x1 , y1 );

            var dX = x2 - x1;
            var dY = y2 - y1;
            var dashes = Math.floor(Math.sqrt( dX * dX + dY * dY ) / dashLen );
            var dashX = dX / dashes;
            var dashY = dY / dashes;

            var q = 0;
            while( q++ < dashes ){
                x1 += dashX;
                y1 += dashY;
                this[q % 2 == 0 ? 'moveTo' : 'lineTo'](x1, y1);
            }
            this[q % 2 == 0 ? 'moveTo' : 'lineTo'](x2, y2);
            return this;
        }
    </script>
    <script src="{!$Resource.alienHeadJS}" type="text/javascript"/>
    <script src="{!$Resource.alienHeadShapesJS}" type="text/javascript"/>
    <script> 
        $('#contactModal').modal();
        var stage = new createjs.Stage('alienCanvas');
        var bg = new createjs.Shape();
        var seed = '';
        var linesCont = new createjs.Container();
        var hudColor = 'hsl(193,40%,20%)'; //'rgba(255,255,255,0.75)';
        var hudBorder = 'rgb(41, 209, 255)'
        var orangeColor = '#F1AF16';
        var lineGraphWidth = 170;
        var dataCont = new createjs.Container();
        var stats = new createjs.Container();
        var widgets = new createjs.Container();
        var dashes = new createjs.Container();

        
        function init(){
            seed = getUrlParameter('s');
            if(seed == null) seed = $('#alienSeed').val();
            if(seed == ''){
                randomSeed();
            }else{
                callAliens();
            }
            $('#shareCode').html('<a href="http://trickshot-developer-edition.na7.force.com/canvas?s='+seed+'" class="btn panelButton btn-default">Share</a>');
            
        }
        function randomSeed(){
            seed = Date.now();
            $('#alienSeed').val(seed);
            $('#shareCode').html('<a href="http://trickshot-developer-edition.na7.force.com/canvas?s='+seed+'" class="btn panelButton btn-default">Share</a>');
            callAliens();
        }
        function genFromSeed(){
            seed = $('#alienSeed').val();
            $('#shareCode').html('<a href="http://trickshot-developer-edition.na7.force.com/canvas?s='+seed+'" class="btn panelButton btn-default">Share</a>');
            callAliens();
        }
        function save(){
            var seeds = $('[id$=seeds]').val();
            seeds += seed+';';
            $('[id$=seeds]').val(seeds);
        }
        var alienDescription = new createjs.Text(drawAlien(seed).history, "14px Arial", "hsl(193,40%,10%)");
        
        var descriptionContainer = new createjs.Container();
        var tkr = createjs.Ticker;
        tkr.framerate = 24;
        tkr.addEventListener("tick", handleTick);
        //tkr.setPaused(true);
        function callAliens(){
            stage.removeAllChildren();
            //bg.graphics.beginLinearGradientFill(['#ccc','#000'], [0, 1], 0, 0, 0, 400).drawRect(0, 0, 1000, 500);
            bg.graphics.beginFill('#000').drawRect(0, 0, 1000, 500);
            var alien = drawAlien(seed);
            var alien1 = new createjs.Container();
            alien1.x = 50;
            alien1.y = 50; 
            var head1 = alien.head;
            alien1.addChild(head1);         

            var hud = new createjs.Container();
            var glow = new createjs.Shadow("hsl(193,40%,70%)", 0, 0, 15);
            var outline = new createjs.Shape();
            outline.graphics.setStrokeStyle(1).beginStroke(hudBorder).beginFill(hudColor)
                .mt(10,20).bt(10,10,10,10,20,10)
                .lt(580,10).bt(590,10,590,10,590,20)
                .lt(590,330).bt(590,340,590,340,580,340)
                .lt(400,340).bt(390,340,390,340,390,330)
                .lt(390,50).bt(390,40,390,40,380,40)
                .lt(20,40).bt(10,40,10,40,10,30)
                .lt(10,20);
            
            var alienName = new createjs.Text(drawAlien(seed).name.toUpperCase(), "24px ARCFleet", orangeColor);
            alienName.x = 20;
            alienName.y = 33;
            alienName.textBaseline = "alphabetic";
            
            var alienHeadParts = head1.getChildByName('partsContainer').children;
            for (var i = 0; i < alienHeadParts.length; i++) {
                var p = alienHeadParts[i];
                if(p.name.includes('_Flipped')){
                    drawPointers(p.x+alien1.x+head1.x+p._bounds.x,p.y+alien1.y+head1.y,hud,350);
                }
            }
            drawPointers(rifi(150,200),rifi(100,300),hud,300);
            drawPointers(rifi(150,200),rifi(100,300),hud,300);
            drawPointers(rifi(150,200),rifi(100,300),hud,300);
            
            
            stats.x = 10;
            stats.y = 40;            

            dnaXArray = [0,1,1,2,2,1,1,0,0];
            var dna = new createjs.Container();
            var dnaBox = new createjs.Shape();        
            var dnaWidth = 50;
            var scale = Math.floor(dnaWidth/dnaXArray.length);
            dnaBox.graphics.setStrokeStyle(1).beginStroke(hudBorder).rect(-5,-10,55,100);
            dna.addChild(dnaBox);
            var nucColors = ['rgba(255,255,0,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)','rgba(0,255,255,0.5)']
            var dnaX = 0;
            for (var i = 0; i < dnaXArray.length; i++) {
                
                circleSize = 3;
                var nuc1 = new createjs.Shape();
                var nuc2 = new createjs.Shape();
                var bond = new createjs.Shape();
                nuc1.graphics.setStrokeStyle(1).beginFill(nucColors[alien.dna[i]%nucColors.length]).dc(dnaX,i*10,circleSize)
                nuc2.graphics.setStrokeStyle(1).beginFill(nucColors[alien.dna[i+dnaXArray.length]%nucColors.length]).dc(dnaWidth-dnaX-scale,i*10,circleSize);
                bond.graphics.setStrokeStyle(1).beginStroke(hudBorder).mt(dnaX,i*10).lt(dnaWidth-dnaX-scale,i*10);
                dna.addChild(bond,nuc1,nuc2);
                dnaX+=dnaXArray[i]*scale;
            }            
            dna.x=115;
            dna.y=140;
            
            var axis = new createjs.Shape();
            axis.graphics.setStrokeStyle(0.5).beginStroke(hudBorder)
                .dashedLineTo(0,5,lineGraphWidth,5,1)
                .dashedLineTo(0,10,lineGraphWidth,10,1)
                .dashedLineTo(0,15,lineGraphWidth,15,1)
                .dashedLineTo(0,20,lineGraphWidth,20,1)
                .dashedLineTo(0,25,lineGraphWidth,25,1)
                .dashedLineTo(0,30,lineGraphWidth,30,1)
                .dashedLineTo(0,35,lineGraphWidth,35,1)
                .dashedLineTo(0,40,lineGraphWidth,40,1)
                .dashedLineTo(0,45,lineGraphWidth,45,1)
            var lineGraphBox = new createjs.Shape();
            var lineGraphCont = new createjs.Container();
            lineGraphBox.graphics.setStrokeStyle(1).beginStroke(hudBorder).mt(0,0).lt(0,50).mt(lineGraphWidth,0).lt(lineGraphWidth,50);
            centerline = rifi(20,30);
            lineGraphCont.addChild(axis,lineGraphBox,linesCont);
            lineGraphCont.x = 0;
            lineGraphCont.y = 240;
            

            dashes.x=10;
            dashes.y=130
            
            dataCont.x=10;
            dataCont.y=0;
            widgets.removeAllChildren();
            widgets.addChild(stats,dna,lineGraphCont,dataCont,dashes);
            widgets.x = 405;
            widgets.y = 30;

            hud.addChild(outline,alienName,widgets);

            stage.addChild(bg);
            stage.addChild(alien1);
            stage.addChild(hud);
            stage.update();

            $('#history').html(alien.history);
        }
        function drawBargraph(h,w,fill,barcolor,graphcolor){
            if(graphcolor == null) graphcolor = hudBorder;
            if(barcolor == null) barcolor = 'hsla('+100*fill+',100%,50%,0.5)';
            var cont = new createjs.Container();
            var graph = new createjs.Shape();
            graph.graphics.setStrokeStyle(1).beginStroke(graphcolor).rect(0,0,w,h);
            var bar = new createjs.Shape();
            bar.graphics.setStrokeStyle(1).beginFill(barcolor).rect(2,2+(h-(fill*h)),w-4,(h*fill)-2);
            cont.addChild(graph);
            cont.addChild(bar);
            return cont;
        }
        function drawPointers(startX,startY,hud,endX){
            var endY = startY - 40;
            var pointer = new createjs.Shape();
            pointer.graphics.setStrokeStyle(1).beginStroke(hudBorder).mt(startX,startY).lt(endX,endY);
            var text = new createjs.Text(rifi(10,99999999),'bold 6px Arial',hudBorder);
            text.x = endX+5;
            text.y = endY;
            text.textBaseline = "alphabetic";
            hud.addChild(text);
            hud.addChild(pointer);
        }
        var i = 0;
        var blahblahblah = rifi(10,99999999);
        var gibI = 0;
        function handleTick(event){
            if (!event.paused) {
                // twice a second
                if(i==0 || i==6 || i==12 || i == 18){
                    drawGraph(6,lineGraphWidth); 
                    stats.removeAllChildren();
                    for (var ii = 0; ii < 10; ii++) {
                        var bargraph = drawBargraph(50,12,rifi(0,100)*0.01,orangeColor);
                        bargraph.x = ii*15;
                        stats.addChild(bargraph)
                    }                   
                }
                if(i==0 || i==12){
                    dataCont.removeAllChildren();
                    blahblahblah += ' '+rifi(10,99999999);
                    var gibberish = new createjs.Text(blahblahblah,'bold 6px Arial',hudBorder);
                    gibberish.lineWidth = 150;
                    dataCont.addChild(gibberish);
                    dashes.removeAllChildren();
                    for (var ii = 0; ii < 8; ii++) {                
                        var w = rifi(10,40);
                        var s = rifi(0,1);
                        var dash = new createjs.Shape();
                        dash.graphics.setStrokeStyle(1).beginFill('hsl(193,40%,'+(w+30)+'%)').rect(0,0,w,10)
                        dash.x=s==0?50-w:50;
                        dash.y=ii*12;
                        dashes.addChild(dash);
                    }
                }
                stage.update();
                var top = 24;
                i = i<top?i+1:0;
                gibI = gibI<140?gibI+1:0;
                if(gibI==0) blahblahblah = blahblahblah.substring(blahblahblah.length/2,blahblahblah.length);
            }
        }
        function drawGraph(nooflines,width){            
            linesCont.removeAllChildren();            
            for (var i = 0; i < nooflines; i++) {
                var line = new createjs.Shape();
                var r1=centerline+(i*rifi(-5,5)),
                    r2=centerline+(i*rifi(-5,5)),
                    r3=centerline+(i*rifi(-5,5)),
                    r4=centerline+(i*rifi(-5,5)),
                    r5=centerline+(i*rifi(-5,5)),
                    r6=centerline+(i*rifi(-5,5)),
                    r7=centerline+(i*rifi(-5,5)),
                    r8=centerline+(i*rifi(-5,5)),
                    r9=centerline+(i*rifi(-5,5)),
                    r10=centerline+(i*rifi(-5,5))
                line.graphics.setStrokeStyle(i/nooflines).beginStroke(orangeColor).mt(0,centerline-(i*3))
                    .lt(width*0.1,r1)
                    .lt(width*0.2,r2)
                    .lt(width*0.3,r3)
                    .lt(width*0.4,r4)
                    .lt(width*0.5,r5)
                    .lt(width*0.6,r6)
                    .lt(width*0.7,r7)
                    .lt(width*0.8,r8)
                    .lt(width*0.9,r9)
                    .lt(width,r10)
                linesCont.addChild(line);
            }            
            var readings = new createjs.Text(r1.toString()+r2.toString()+r3.toString()+r4.toString()+r5.toString()+r6.toString()+r7.toString()+r8.toString()+r9.toString()+r10.toString(),"10px Arial", hudBorder);
            readings.x = 0;
            readings.y = 50;
            linesCont.addChild(readings);
        }
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;
            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');
                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : sParameterName[1];
                }
            }
        };
    </script>
</apex:page>