<!--
* @description ngRemoteObjects component which creates AngularJS services for all defined remoteObjects. Naming will be: <remoteObjectName>Service
-->
<apex:component layout="none" controller="ngRemoteObjectsController">
    <apex:attribute name="remoteObjectNamespace" type="String" required="false" default="SObjectModel" description="js namespace defined in the apex:remoteObjects tag" />
    <apex:attribute name="remoteObjects" type="String" required="true" assignTo="{!remoteObjectNames}" description="names of all remoteObject for which services will be created - separated by comma (i.e. 'Account, Contact')" />
    <apex:attribute name="VisualforceVariables" type="Boolean" required="false" default="false" description="checked if Visualforce constant should be created so that the AngularJS app can access Visualforce components" />

    <script type="text/javascript">
        /**
        * @description defines ngRemoteObjects AngularJS module
        */
        var ngRemoteObjects = angular.module('ngRemoteObjects', []);

        /**
        * @description generic service which dynamically accesses all four functions for the sObjectModel which is given to it
        * @param sObjectModel RemoteObjectModel
        */
        ngRemoteObjects.factory('GenericService', ['$q', function($q) {
            return function(sObjectModel) {
                var service = {
                    retrieve : function(options) {
                        var deferred = $q.defer();
                        sObjectModel.retrieve(options, function(error, records, event) {
                            if(error){
                                deferred.reject(error);
                            }else{
                                deferred.resolve(event.result);
                            }
                        });
                        return deferred.promise;
                    },
                    create : function(record) {
                        var deferred = $q.defer();
                        sObjectModel.create(record, function(error, records, event) {
                            if(error){
                                deferred.reject(error);
                            }else{
                                deferred.resolve(event.result);
                            }
                        });
                        return deferred.promise;
                    },
                    upsert : function(record) {
                        var deferred = $q.defer();
                        sObjectModel._props = record;
                        sObjectModel.upsert(function(error, records, event) {
                            if(error){
                                deferred.reject(error);
                            }else{
                                deferred.resolve(event.result);
                            }
                        });
                        return deferred.promise;
                    },
                    update : function(record) {
                        var deferred = $q.defer();
                        sObjectModel._props = record;
                        sObjectModel.update(function(error, records, event) {
                            if(error){
                                deferred.reject(error);
                            }else{
                                deferred.resolve(event.result);
                            }
                        });
                        return deferred.promise;
                    },
                    delete : function(recordId) {
                        var deferred = $q.defer();
                        sObjectModel.del(recordId, function(error, records, event) {
                            if(error){
                                deferred.reject(error);
                            }else{
                                deferred.resolve(event.result);
                            }
                        });
                        return deferred.promise;
                    }
                };
                return service;
            }
        }])
    </script>

    <!-- @description makes Visualforce variables available inside Angular -->
  
    <apex:outputPanel layout="none" rendered="{!VisualforceVariables}">
        <script type="text/javascript">
            ngRemoteObjects.constant('Visualforce', {
                User : {
                    Id : '{!$User.Id}',
                    FirstName : '{!$User.FirstName}',
                    LastName : '{!$User.LastName}',
                    Alias : '{!$User.Alias}',
                    Title : '{!$User.Title}'
                },
                CurrentPage : {
                    Name : '{!$CurrentPage.Name}',
                    Url : '{!$CurrentPage.Url}'
                },
                Profile : {
                    Id : '{!$Profile.Id}',
                    Name : '{!$Profile.Name}'
                },
            });
        </script>
    </apex:outputPanel>

    <!-- @description loop over all remoteObjects to create an AngularJS service for each of them -->
  
    <apex:repeat value="{!remoteObjectList}" var="remoteObject">
        <script type="text/javascript">
            ngRemoteObjects.factory('{!remoteObject}Service', ['GenericService', function(GenericService){
                var model = new {!remoteObjectNamespace}.{!remoteObject}();
                var service = {
                    retrieve : function(options) {
                        return GenericService(model).retrieve(options);
                    },
                    retrieveById : function(recordId) {
                        var options = {
                            where: {
                                Id: {
                                    eq: recordId
                                }
                            },
                            limit: 1
                        };
                        return GenericService(model).retrieve(options);
                    },
                    retrieveRecentItems : function(numberOfRecentItems) {
                        var options = {
                            limit: numberOfRecentItems
                        };
                        return GenericService(model).retrieve(options);
                    },
                    create : function(record) {
                        return GenericService(model).create(record);
                    },
                    upsert : function(record) {
                        return GenericService(model).upsert(record);
                    },
                    update : function(record) {
                        return GenericService(model).update(record);
                    },
                    delete : function(recordId) {
                        return GenericService(model).delete(recordId);
                    }
                }
                return service;
            }])
        </script>
    </apex:repeat>
</apex:component>